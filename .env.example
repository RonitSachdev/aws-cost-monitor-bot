# ====================================
#  AWS Cost Monitoring Bot Configuration
# ====================================
# Copy this file to .env and fill in your actual values

# ================
# AWS Configuration
# ================
# Get these from AWS IAM Console
# Create an IAM user with Cost Explorer permissions
AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE
AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
AWS_DEFAULT_REGION=us-east-1

# ==================
# Slack Configuration  
# ==================
# Get bot token from https://api.slack.com/apps
# Token should start with xoxb-
SLACK_BOT_TOKEN=xoxb-1234567890-1234567890123-AbCdEfGhIjKlMnOpQrStUvWx
SLACK_CHANNEL=#aws-alerts

# =========================
# Cost Monitoring Settings
# =========================
# Dollar amount that triggers alerts
COST_THRESHOLD=100.0

# Number of days to analyze for trends  
MONITORING_PERIOD_DAYS=7

# Currency code (USD, EUR, GBP, etc.)
CURRENCY=USD

# =================
# Project Settings
# =================
# Name to identify this project in alerts
PROJECT_NAME=My AWS Project

# How often to send notifications: daily, weekly, monthly
NOTIFICATION_FREQUENCY=daily

# ========================
# Service-Specific Controls
# ========================
# Services to monitor (comma-separated, or 'all' for all services)
ENABLED_SERVICES=all

# Services to exclude from monitoring (comma-separated)
DISABLED_SERVICES=Amazon Glacier,AWS Data Transfer

# Service-specific thresholds (JSON format)
SERVICE_THRESHOLDS={"Amazon EC2": 500.0, "Amazon RDS": 200.0, "Amazon S3": 100.0}

# ========================
# Resource ARN Filtering
# ========================
# Specific resource ARNs to monitor (comma-separated, leave empty for all)
RESOURCE_ARNS=

# Resource ARNs to exclude from monitoring (comma-separated)
EXCLUDED_ARNS=arn:aws:ec2:us-east-1:123456789012:instance/i-test123

# Tag-based filtering (JSON format)
TAG_FILTERS={"Environment": "production", "Project": "myapp"}

# ========================
# Advanced Monitoring
# ========================
# Enable anomaly detection (true/false)
ENABLE_ANOMALY_DETECTION=true

# Anomaly detection sensitivity (low, medium, high)
ANOMALY_SENSITIVITY=medium

# Enable cost forecasting (true/false)
ENABLE_COST_FORECASTING=true

# Number of days to forecast
FORECAST_DAYS=30

# ========================
# Alert Configuration
# ========================
# Alert level percentages
ALERT_CRITICAL_PERCENT=100.0
ALERT_WARNING_PERCENT=80.0
ALERT_INFO_PERCENT=50.0

# Enable detailed service breakdown in alerts (true/false)
ENABLE_DETAILED_BREAKDOWN=true

# Maximum number of services to show in alerts
MAX_SERVICES_IN_ALERT=10

# ========================
# Scheduling Configuration
# ========================
# Check interval in hours
CHECK_INTERVAL_HOURS=6

# Enable monitoring on weekends (true/false)
ENABLE_WEEKEND_MONITORING=true

# Timezone for scheduling (defaults to system timezone)
TIMEZONE=UTC

# ========================
# Debug and Logging
# ========================
# Enable debug mode (true/false)
DEBUG_MODE=false

# Log level (DEBUG, INFO, WARNING, ERROR)
LOG_LEVEL=INFO

# ====================================
# Setup Instructions:
# ====================================
# 1. Copy this file: cp env..example .env
# 2. Edit .env with your actual values
# 3. Test: python main.py --test
# 4. Run: python main.py --daemon

# ====================================
# Example Configurations:
# ====================================

# Production Environment:
# COST_THRESHOLD=1000.0
# ENABLED_SERVICES=Amazon EC2,Amazon RDS,Amazon S3,AWS Lambda
# SERVICE_THRESHOLDS={"Amazon EC2": 500.0, "Amazon RDS": 200.0}
# TAG_FILTERS={"Environment": "production"}
# CHECK_INTERVAL_HOURS=2

# Development Environment:
# COST_THRESHOLD=100.0
# ENABLED_SERVICES=all
# DISABLED_SERVICES=Amazon SageMaker,Amazon EMR
# CHECK_INTERVAL_HOURS=12
# ENABLE_WEEKEND_MONITORING=false

# Cost-Optimized Configuration:
# COST_THRESHOLD=50.0
# ANOMALY_SENSITIVITY=high
# ENABLE_DETAILED_BREAKDOWN=true
# MAX_SERVICES_IN_ALERT=15
# CHECK_INTERVAL_HOURS=4 